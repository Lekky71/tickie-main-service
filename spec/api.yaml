openapi: 3.0.0
info:
  title: Tickie API Docs
  version: 1.0.0
  description: bla bla bla
paths:
  /user/auth/otp-request:
    post:
      summary: "Signup: OTP Request"
      tags:
        - onboarding
      operationId: SignupOTPRequest
      parameters:
        - $ref: '#/components/parameters/DeviceID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupOTPRequestDto"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
        '400':
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /user/auth/otp-verify/signup:
    post:
      tags:
        - onboarding
      operationId: SignUpOTPVerify
      summary: 'Endpoint to receive OTP sent to user email'
      parameters:
        - $ref: '#/components/parameters/DeviceID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupVerifyOtpRequest'
      responses:
        200:
          description: 'Successful verification, a jwt token valid for 1 hour is returned so that client can send in user signup information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'

  /user/auth/otp-verify/login:
    post:
      tags:
        - onboarding
      operationId: loginVerifyOTP
      summary: 'Endpoint to verify login OTP on device change'
      parameters:
        - $ref: '#/components/parameters/DeviceID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginVerifyDeviceChangeOtpRequest'
      responses:
        200:
          description: 'Device verification successful, login token is returned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          description: "Device verification failed"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  { "message": "device verification token expired or invalid" }

  /user/auth/signup:
    post:
      tags:
        - onboarding
      operationId: SignUpUserInfo
      summary: 'Save new user information'
      parameters:
        - $ref: '#/components/parameters/AuthToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpUserInfoRequest'
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/ErrorResponse401'

  /user/auth/login:
    post:
      tags:
        - onboarding
      operationId: LoginUser
      summary: 'Login User'
      parameters:
        - $ref: '#/components/parameters/DeviceID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: 'Bad request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  { "message": "Invalid Login details" }
        401:
          description: 'Device not recognised'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  { "message": "Device not recognised, enter OTP sent to mail to verify" }

  /user/auth/google-auth:
    post:
      tags:
        - onboarding
      operationId: AuthWithGoogle
      summary: 'Endpoint to receive Google Auth Token and get the user signed in'
      parameters:
        - $ref: '#/components/parameters/DeviceID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleAuthRequest'
      responses:
        200:
          description: 'Auth token is returned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'

  /user/auth/forgotpassword/otp-request:
    post:
      tags:
        - authentication
      operationId: ForgotPasswordOtpRequest
      summary: 'Endpoint to request top when user forgets their password'
      requestBody:
         content:
           application/json:
              schema:
                $ref: '#/components/schemas/ForgotPasswordOtpRequest'
          required: true      
      responses:  
         "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
        '400':
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string    

     /user/auth/forgotpassword/otp-verify:
        post:   
          tags:
             - authentication
           operationId: ForgotPasswordOtpVerify
           summary: 'Endpoint to verify OTP sent to user email'
           parameters:
              - $ref:  '#/components/parameters/DeviceID'  
            requestBody:
               content:
                 application/json:
                   schema:
                      $ref:'#/components/schema/ForgotPasswordVerifyOtpRequest' 
            responses:
               200:
                 description: 'Successful verification, a jwt token valid for one hour is returned so client can use to change password',
                 content:
                    application/json:
                       schema:
                         $ref:'#/components/schemas/TokenResponse'
               401:
                 description: 'Invalid credentials' 
                 content: 
                    application/json:
                       schema:
                          type: object
                          properties:
                            message:
                              type: string
                          example:
                            {"message":"the otp entered is invalid"}   


      /user/auth/forgotpassword/password-reset:
          post:
            tags:
               - authentication
            operationId: PasswordReset
            summary: 'Endpoint to set a new password after otp has been confirmed',
            parameters:
                - $ref: '#/components/parameters/DeviceID'
                - $ref: '#/components/parameters/AuthToken'
            requestBody:
               content:
                 application/json:   
                   schema:
                    $ref: '#/components/schemas/ResetPasswordRequest'      
             responses:
                200:
                   description: 'Success'
                   content:
                      application/json:
                         schema:
                            $ref:   $ref: '#/components/schemas/TokenResponse'
                401:          
                  $ref: '#/components/responses/ErrorResponse401'
  

                             
                                          
         

  /user/me:
    get:
      summary: 'Get user details'
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/AuthToken'
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: 'edit user details'
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/AuthToken'
      operationId: EditUserProfile
      requestBody:
        content:
          multipart/form-data: # Media type
            encoding:
              avatar:
                contentType: image/png, image/jpeg, image/heic, image/heif
            schema:
              $ref: '#/components/schemas/EditUserInfoRequest'
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: 'User does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'

  /user/change-password:
    put:
      summary: 'Change user Password'
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/AuthToken'
      operationId: Change User Password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserPassword'
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: 'Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  { "message": "Your current password is wrong, you've two tries left" }

  /events:
    post:
      summary: 'Create a new event'
      description: 'Create new events, can also save events as drafts too'
      tags:
        - Events
      parameters:
        - $ref: '#/components/parameters/AuthToken'
      operationId: PostEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        201:
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEventDto'
        400:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
    get:
      summary: 'And endpoint for users to get their own events'
      tags:
        - Events
      operationId: GetEvents
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'

  /events/{eventId}:
    parameters:
      - $ref: '#/components/parameters/AuthToken'
      - $ref: '#/components/parameters/EventID'
    put:
      summary: 'Edit Already existing events by the creator'
      tags:
        - Events
      operationId: EditEvents

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        404:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
    delete:
      summary: 'Delete Already existing events by only the creator'
      tags:
        - Events
      operationId: DeleteEvents
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        404:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
    get:
      summary: 'Get Event'
      tags:
        - Events
      parameters:
        - $ref: '#/components/parameters/EventID'
      operationId: GetEvent
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        404:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'

  /events/explore:
    get:
      summary: 'Get events with query pagination, search query, and query size'
      tags:
        - Events
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: size
          schema:
            type: integer
            maximum: 50
          description: The numbers of items to return per query
        - in: query
          name: search
          schema:
            type: string
          description: search query for filtering
      operationId: GetEvents
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventsResponse'
        400:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'

  # API specs for endpoints related to ticket
  /events/{eventId}/tickets:
    parameters:
      - $ref: '#/components/parameters/EventID'
      - $ref: '#/components/parameters/AuthToken'
    post:
      summary: 'Ticket: create Ticket'
      tags:
        - Ticket
      operationId: CreateTicket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketRequest'
        required: true
      responses:
        201:
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        400:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: 'Get all tickets'
      tags:
        - Ticket
      parameters:
        - name: eventType
          schema:
            type: string
          required: false
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTicketResponse'
        404:
          description: 'No ticket found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


    /events/{eventId}/tickets/:ticketId:
      parameters:
        - $ref: '#/components/parameters/TicketID'
        - $ref: '#/components/parameters/EventID'
        - $ref: '#/components/parameters/AuthToken'
      put:
        summary: 'Ticket: update Ticket'
        tags:
          - Ticket
        operationId: UpdateTicket
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketRequest'
          required: true
        responses:
          200:
            description: 'Success'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DefaultResponse'
          400:
            description: "Error"
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'

      get:
        summary: 'Get ticket detail'
        tags:
          - Ticket
        responses:
          200:
            description: 'Success'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Ticket'
          404:
            description: 'Ticket not found'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        delete:
          summary: 'Delete Ticket'
          tags:
            - Ticket
          responses:
            200:
              description: 'Success'
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/DefaultResponse'
            401:
              description: 'Unauthorized'
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorResponse'


      /events/{eventId]/tickets/:ticketId/purchase:
        post:
          summary: 'buy a ticket'
          tags:
            - Ticket
          parameters:
            - $ref: '#/components/parameters/AuthToken'
            - $ref: '#/components/parameters/EventID'
            - $ref: '#/components/parameters/TicketID'
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TicketPurchaseRequest'
              required: true
          responses:
            200:
              description: "Successfully purchased tickets"
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/DefaultResponse'
            400:
              description: "error in purchase"
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorResponse'




components:
  parameters:
    UserID:
      name: userId
      in: path
      schema:
        type: string
      required: true
    AuthToken:
      name: x-auth-token
      in: header
      schema:
        type: string
      required: true
    DeviceID:
      name: x-device-id
      in: header
      schema:
        type: string
      required: true
    Page:
      name: page
      in: query
      schema:
        type: number
        default: 1
      required: false
    Size:
      name: size
      in: query
      schema:
        type: number
        default: 20
        minimum: 1
        maximum: 30
      required: false
    EventType:
      name: eventType
      in: query
      schema:
        type: string
      required: false

    EventID:
      name: eventId
      in: path
      schema:
        type: string
        format: uuid
      required: true

    TicketID:
      name: eventId
      in: path
      schema:
        type: string
        format: uuid
      required: true


  responses:
    ErrorResponse401:
      description: 'Invalid JWT token'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example: { "message": "Invalid JWT token" }

  schemas:
    TicketTypeEnum:
      type: string
      enum:
        - show
        - concert
        - dinner

    SignupOTPRequestDto:
      title: SignupOTPRequestDto
      example:
        email: hashilekky@gmail.com
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email

    ForgotPasswordOtpRequest:
        title: ForgotPasswordOtpRequest
        example:
           email: hashlekky@gmail.com
        type: object
        properties:
           email:
             type: string
             format: email
        required:
          - email             

    SignupVerifyOtpRequest:
      type: object
      properties:
        email:
          type: string
        otp:
          type: string

     ForgotPasswordVerifyOtpRequest:
       type: object
       properties:
          email:
            type: string
          otp:
            type: string       

    LoginVerifyDeviceChangeOtpRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        otp:
          type: string
        trustDevice:
          type: boolean
      required:
        - email
        - otp

    TokenResponse:
      type: object
      properties:
        token:
          type: string

    DefaultResponse:
      title: DefaultResponse
      type: object
      properties:
        message:
          type: string
      required:
        - message

    ErrorResponse:
      title: DefaultResponse
      type: object
      properties:
        error:
          type: string
        message:
          type: string
      required:
        - message

    NotFoundResponse:
      type: object
      properties:
        message:
          type: string
      example:
        { "message": "No resource found" }


    BadRequestResponse:
      type: object
      properties:
        message:
          type: string
      example:
        { "message": "Bad request, try again" }

    User:
      type: object
      required:
        - id
        - fullName
        - email
      properties:
        id:
          type: string
        fullName:
          type: string
        email:
          type: string
          format: email
      example:
        #        id: sdgweqgwerg
        fullName: Myke Dunsimi
        email: user@example.com

    SignUpUserInfoRequest:
      type: object
      required:
        - password
        - fullName
      properties:
        password:
          type: string
          format: password
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
        fullName:
          type: string

    ResetPasswordRequest:
       type: object
       required:
          - password
       properties:
          password:
             type: string
             format: password
             pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'        

    EditUserInfoRequest:
      type: object
      properties:
        fullName:
          type: string
        avatar:
          type: string
          format: binary

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    GoogleAuthRequest:
      type: object
      properties:
        email:
          type: string
        googleToken:
          type: string

    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    ChangeUserPassword:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
          format: password
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
    Event:
      type: object
      required:
        - name
        - creator
      properties:
        name:
          type: string
        type:
          type: string
        description:
          type: string
          format: email
        endDate:
          type: string
        creator:
          $ref: '#/components/schemas/PublicUser'
      example: {
        "coverImage": "https://example.coo/event-c2548bbf-1fd4-492a-9d25-988234880980.jpg",
        "name": "Myke's Event",
        "creator": {
          "id": "c2548bbf-1fd4-492a-9d25-988234880980",
          "fullName": "Myke Awoniran",
          "avatar": "https://example.coo/event-c2548bbf-1fd4-492a-9d25-988234880980.jpg"
        },
        "description": "myke event",
        "endDate": "2022-4-7",
        "date": "2022-4-7",
        "type": "PAID"
      }
    CreateEventDto:
      additionalProperties: false
      type: object
      required:
        - name
        - creator
        - description
        - endDate
        - date
        - location
        - isDraft
        - isPublic
        - type
        - coverImage
      properties:
        name:
          type: string
        description:
          type: string
          minLength: 20
          maxLength: 100
        endDate:
          type: string
        creator:
          type: string
        date:
          type: number
        location:
          type: string
          minLength: 20
          maxLength: 100
        isDraft:
          type: boolean
          default: true
        isPublic:
          type: boolean
          default: false
        type:
          type: string
        coverImage:
          type: string
      example:
        name: Myke's Event
        creator: 827472882-28284772jwjuj2wej-23
    EventsArrayResponse:
      type: array
      items:
        $ref: '#/components/schemas/Event'


    GetEventsResponse:
      title: CreateEventResponse
      type: object
      properties:
        pagination:
          type: object
          properties:
            page:
              type: integer
            size:
              type: integer
            lastPage:
              type: integer
            totalCount:
              type: integer
        events:
          $ref: '#/components/schemas/EventsArrayResponse'
          example:
            {
              "page": 1,
              "size": 50,
              "lastPage": 5,
              "totalCount": 241,
              "events": [ ]
            }

    #Ticket related schemas

    TicketRequest:
      type: object
      required:
        - name
        - event
        - description
        - price
        - type
        - total
      properties:
        name:
          type: string
          minLength: 5
          maxLength: 20
        event:
          type: string
          format: uuid
        description:
          type: string
          minLength: 30
          maxLength: 100
        price:
          type: number
          minimum: 0.00
        type:
          type: string
        total:
          type: number
          minimum: 1

    TicketPurchaseRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
        metadata:
          type: object
          properties:
            name:
              type: string
    GetTicketResponse:
      title: ticketResponse
      type: object
      properties:
        pagination:
          type: object
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
    Ticket:
      type: object
      required:
        - id
        - name
        - event
        - description
        - price
        - type
        - total
        - available
        - isDraft
      properties:
        id:
          type: string
        name:
          type: string
        event:
          type: string
        description:
          type: string
        price:
          type: number
        type:
          type: string
        total:
          type: number
        available:
          type: number
        isDraft:
          type: boolean

    PublicUser:
      type: object
      required:
        - id
        - fullName
        - avatar
      properties:
        id:
          type: string
        fullName:
          type: string
        avatar:
          type: string

